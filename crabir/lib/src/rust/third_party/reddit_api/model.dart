// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'model/comment.dart';
import 'model/multi.dart';
import 'model/post.dart';
import 'model/subreddit.dart';
import 'model/user/model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'model.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `as_ref`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `cmp`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `partial_cmp`, `try_from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Fullname>>
abstract class Fullname implements RustOpaqueInterface {
  static Future<Fullname> default_() =>
      RustLib.instance.api.redditApiModelFullnameDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Listing>>
abstract class Listing implements RustOpaqueInterface {
  String? get after;

  String? get before;

  List<Thing> get children;

  int? get dist;

  String? get modhash;

  set after(String? after);

  set before(String? before);

  set children(List<Thing> children);

  set dist(int? dist);

  set modhash(String? modhash);

  static Future<Listing> default_() =>
      RustLib.instance.api.redditApiModelListingDefault();
}

@freezed
sealed class Thing with _$Thing {
  const Thing._();

  const factory Thing.listing(
    Listing field0,
  ) = Thing_Listing;
  const factory Thing.comment(
    Comment field0,
  ) = Thing_Comment;
  const factory Thing.user(
    User field0,
  ) = Thing_User;
  const factory Thing.post(
    Post field0,
  ) = Thing_Post;
  const factory Thing.message() = Thing_Message;
  const factory Thing.subreddit(
    Subreddit field0,
  ) = Thing_Subreddit;
  const factory Thing.award() = Thing_Award;
  const factory Thing.multi(
    Multi field0,
  ) = Thing_Multi;

  /// How to load more comment in a given thread
  const factory Thing.more({
    /// Has the same id as its first children
    /// If there is no children is "_".
    required String id,

    /// Name of the first children. If there is none is "t1__".
    required Fullname name,
    required int count,
    required int depth,
    required List<String> children,
  }) = Thing_More;
  const factory Thing.wikipage({
    required String contentHtml,
  }) = Thing_Wikipage;

  /// flutter_rust_bridge:getter,sync
  Fullname? get name => RustLib.instance.api.redditApiModelThingName(
        that: this,
      );
}

enum Timeframe {
  hour,
  day,
  week,
  month,
  year,
  all,
  ;
}
