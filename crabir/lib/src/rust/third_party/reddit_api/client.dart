// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'model.dart';
import 'model/comment.dart';
import 'model/multi.dart';
import 'model/post.dart';
import 'model/subreddit.dart';
import 'model/user.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `SaveFeed`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `fetch_next`, `fmt`, `fmt`, `fmt`, `from`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `feed`, `saved`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>
abstract class Client implements RustOpaqueInterface {
  /// Authenticate the current client
  Future<void> authenticate({required String refreshToken});

  /// Returns the comments for the post at the given permalink. Each element in the vec is either
  /// a [`Thing::Comment`] or a [`Thing::More`].
  /// # Errors
  /// Fails if the request fails or the parsing of the response fails.
  Future<List<Thing>> comments({required String permalink});

  static Future<Client> default_() =>
      RustLib.instance.api.redditApiClientClientDefault();

  /// Create a new client that is authenticated
  static Future<Client> fromRefreshToken({required String refreshToken}) =>
      RustLib.instance.api
          .redditApiClientClientFromRefreshToken(refreshToken: refreshToken);

  Future<List<Thing>> loadMoreComments(
      {required Fullname parentId, required List<String> children});

  /// Get the info of the current user.
  /// # Errors
  /// Returns an error if the http client fails or if the parsing of the response fails.
  Future<UserInfo> loggedUserInfo();

  /// Get the list of multireddits the current user is subscribed to.
  /// # Errors
  /// Returns an error if the http client fails or if the parsing of the response fails.
  Future<List<Multi>> multis();

  /// Create a new client for a logged out user
  static Future<Client> newAnonymous() =>
      RustLib.instance.api.redditApiClientClientNewAnonymous();

  /// Save a saveable item (i.e. a [`Post`] or a [`Comment`]).
  /// # Errors
  /// Returns an error if the request failed.
  Future<void> save({required Fullname thing});

  /// Get the list of subreddits the current user is subscribed to.
  /// # Errors
  /// Returns an error if the http client fails or if the parsing of the response fails.
  Future<List<Subreddit>> subsriptions();

  /// Unsave a saveable item (i.e. a [`Post`] or a [`Comment`]).
  /// # Errors
  /// Returns an error if the request failed.
  Future<void> unsave({required Fullname thing});

  /// Vote on a votable item (i.e. a [`Post`] or a [`Comment`]).
  /// # Errors
  /// Returns an error if the request failed.
  Future<void> vote(
      {required Fullname thing, required VoteDirection direction});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Pager>>
abstract class Pager implements RustOpaqueInterface {
  Future<Url> addToUrl({required Url url});

  Future<void> after({String? after});

  Future<void> before({String? before});

  static Future<Pager> default_() =>
      RustLib.instance.api.redditApiClientPagerDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Url>>
abstract class Url implements RustOpaqueInterface {}

enum VoteDirection {
  up,
  down,
  neutral,
  ;
}
