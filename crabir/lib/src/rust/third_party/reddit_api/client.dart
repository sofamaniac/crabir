// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'model.dart';
import 'model/comment.dart';
import 'model/feed.dart';
import 'model/flair.dart';
import 'model/multi.dart';
import 'model/post.dart';
import 'model/subreddit.dart';
import 'model/user/model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'search.dart';
import 'streamable.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Client>>
abstract class Client implements RustOpaqueInterface {
  /// Authenticate the current client
  Future<void> authenticate({required String refreshToken});

  /// Returns the comments for the post at the given permalink. Each element in the vec is either
  /// a [`Thing::Comment`] or a [`Thing::More`].
  /// # Errors
  /// Fails if the request fails or the parsing of the response fails.
  Future<(Post, List<Thing>)> comments(
      {required String permalink, CommentSort? sort});

  static Future<Client> default_() =>
      RustLib.instance.api.redditApiClientClientDefault();

  /// flutter_rust_bridge:sync
  Streamable feedStream({required Feed feed, required FeedSort sort});

  /// Create a new client that is authenticated
  static Future<Client> fromRefreshToken({required String refreshToken}) =>
      RustLib.instance.api
          .redditApiClientClientFromRefreshToken(refreshToken: refreshToken);

  /// Returns the content of the post at the given permalink.
  /// # Errors
  /// Fails if the request fails or the parsing of the response fails.
  Future<Post> getPost({required String permalink});

  Future<List<Thing>> loadMoreComments(
      {required Fullname parentId,
      required List<String> children,
      CommentSort? sort});

  /// Get the info of the current user.
  /// # Errors
  /// Returns an error if the http client fails or if the parsing of the response fails.
  Future<UserInfo> loggedUserInfo();

  ///flutter_rust_bridge:sync
  Streamable multiPosts({required Multi multi, required FeedSort sort});

  /// Get the list of multireddits the current user is subscribed to.
  /// # Errors
  /// Returns an error if the http client fails or if the parsing of the response fails.
  Future<List<Multi>> multis();

  /// Create a new client for a logged out user
  static Future<Client> newAnonymous() =>
      RustLib.instance.api.redditApiClientClientNewAnonymous();

  /// Create a new access token for a logged out user
  Future<void> newLoggedOutUserToken();

  /// Save a saveable item (i.e. a [`Post`] or a [`Comment`]).
  /// # Errors
  /// Returns an error if the request failed.
  Future<void> save({required Fullname thing});

  ///flutter_rust_bridge:sync
  Streamable searchPost(
      {String? subreddit,
      Flair? flair,
      String? query,
      required PostSearchSort sort});

  ///flutter_rust_bridge:sync
  Streamable searchSubreddits(
      {required String query, required SubredditSearchSort sort});

  /// Get the list of all subreddits the current user is subscribed to.
  /// # Errors
  /// Returns an error if the http client fails or if the parsing of the response fails.
  Future<List<Subreddit>> subsriptions();

  /// Unsave a saveable item (i.e. a [`Post`] or a [`Comment`]).
  /// # Errors
  /// Returns an error if the request failed.
  Future<void> unsave({required Fullname thing});

  /// flutter_rust_bridge:sync
  Streamable userComments(
      {required String username, required UserStreamSort sort});

  /// flutter_rust_bridge:sync
  Streamable userDownvoted({required String username});

  /// flutter_rust_bridge:sync
  Streamable userGilded({required String username});

  /// flutter_rust_bridge:sync
  Streamable userHidden({required String username});

  /// flutter_rust_bridge:sync
  Streamable userOverview(
      {required String username, required UserStreamSort sort});

  /// Get saved items ( both [`Post`] and [`Comment`] ) for the specified user.
  /// # Errors
  /// Fails if api request fails.
  /// flutter_rust_bridge:sync
  Streamable userSaved({required String username});

  /// flutter_rust_bridge:sync
  Streamable userSubmitted(
      {required String username, required UserStreamSort sort});

  /// flutter_rust_bridge:sync
  Streamable userUpvoted({required String username});

  /// Vote on a votable item (i.e. a [`Post`] or a [`Comment`]).
  /// # Errors
  /// Returns an error if the request failed.
  Future<void> vote(
      {required Fullname thing, required VoteDirection direction});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Pager>>
abstract class Pager implements RustOpaqueInterface {
  Future<Url> addToUrl({required Url url});

  Future<void> after({String? after});

  Future<void> before({String? before});

  static Future<Pager> default_() =>
      RustLib.instance.api.redditApiClientPagerDefault();
}

enum VoteDirection {
  up,
  down,
  neutral,
  ;
}
