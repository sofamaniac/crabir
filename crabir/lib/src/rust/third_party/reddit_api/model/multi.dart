// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `try_from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Multi>>
abstract class Multi implements RustOpaqueInterface {
  bool get canEdit;

  String? get copiedFrom;

  double get created;

  double get createdUtc;

  String get descriptionHtml;

  String get descriptionMd;

  String get displayName;

  String get iconUrl;

  bool get isFavorited;

  bool get isSubscriber;

  String? get keyColor;

  Fullname get name;

  PlatformInt64 get numSubscribers;

  bool get over18;

  String get owner;

  String get ownerId;

  String get path;

  List<SubredditName> get subreddits;

  String get visibility;

  set canEdit(bool canEdit);

  set copiedFrom(String? copiedFrom);

  set created(double created);

  set createdUtc(double createdUtc);

  set descriptionHtml(String descriptionHtml);

  set descriptionMd(String descriptionMd);

  set displayName(String displayName);

  set iconUrl(String iconUrl);

  set isFavorited(bool isFavorited);

  set isSubscriber(bool isSubscriber);

  set keyColor(String? keyColor);

  set name(Fullname name);

  set numSubscribers(PlatformInt64 numSubscribers);

  set over18(bool over18);

  set owner(String owner);

  set ownerId(String ownerId);

  set path(String path);

  set subreddits(List<SubredditName> subreddits);

  set visibility(String visibility);

  static Future<Multi> default_() =>
      RustLib.instance.api.redditApiModelMultiMultiDefault();
}

class SubredditName {
  /// name of the subreddit (e.g. awwnime)
  final String name;

  const SubredditName({
    required this.name,
  });

  static Future<SubredditName> default_() =>
      RustLib.instance.api.redditApiModelMultiSubredditNameDefault();

  @override
  int get hashCode => name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SubredditName &&
          runtimeType == other.runtimeType &&
          name == other.name;
}
