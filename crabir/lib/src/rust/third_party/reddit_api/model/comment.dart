// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../model.dart';
import 'author.dart';
import 'flair.dart';
import 'multi.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'post.dart';
import 'subreddit.dart';
import 'user/model.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `try_from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Comment>>
abstract class Comment implements RustOpaqueInterface {
  bool get archived;

  AuthorInfo? get author;

  String get body;

  String get bodyHtml;

  bool get canGild;

  bool get canModPost;

  bool get collapsed;

  int get controversiality;

  DateTime get created;

  DateTime get createdUtc;

  int get depth;

  int get downs;

  double? get edited;

  int get gilded;

  String get id;

  bool get isSubmitter;

  bool? get likes;

  String get linkId;

  bool get locked;

  Fullname get name;

  bool get noFollow;

  String get parentId;

  String get permalink;

  bool get saved;

  int get score;

  bool get scoreHidden;

  bool get sendReplies;

  bool get stickied;

  String get subreddit;

  String get subredditId;

  String get subredditNamePrefixed;

  String get subredditType;

  int get ups;

  set archived(bool archived);

  set author(AuthorInfo? author);

  set body(String body);

  set bodyHtml(String bodyHtml);

  set canGild(bool canGild);

  set canModPost(bool canModPost);

  set collapsed(bool collapsed);

  set controversiality(int controversiality);

  set created(DateTime created);

  set createdUtc(DateTime createdUtc);

  set depth(int depth);

  set downs(int downs);

  set edited(double? edited);

  set gilded(int gilded);

  set id(String id);

  set isSubmitter(bool isSubmitter);

  set likes(bool? likes);

  set linkId(String linkId);

  set locked(bool locked);

  set name(Fullname name);

  set noFollow(bool noFollow);

  set parentId(String parentId);

  set permalink(String permalink);

  set saved(bool saved);

  set score(int score);

  set scoreHidden(bool scoreHidden);

  set sendReplies(bool sendReplies);

  set stickied(bool stickied);

  set subreddit(String subreddit);

  set subredditId(String subredditId);

  set subredditNamePrefixed(String subredditNamePrefixed);

  set subredditType(String subredditType);

  set ups(int ups);

  static Future<Comment> default_() =>
      RustLib.instance.api.redditApiModelCommentCommentDefault();

  /// flutter_rust_bridge:sync
  /// If `more` is a `Thing::More`, if it exists in `Self::replies` or in the replies of one of
  /// its children, will replace it with `new_things`.
  void replaceMore({required Thing more, required List<Thing> newThings});

  /// flutter_rust_bridge:sync
  List<Thing> replies();
}

enum CommentSort {
  confidence,
  top,
  new_,
  controversial,
  old,
  random,
  qa,
  live,
  ;
}
