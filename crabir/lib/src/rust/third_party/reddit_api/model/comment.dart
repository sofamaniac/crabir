// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../client.dart';
import '../model.dart';
import 'author.dart';
import 'flair.dart';
import 'multi.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'post.dart';
import 'subreddit.dart';
import 'user/model.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`, `try_from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Comment>>
abstract class Comment implements RustOpaqueInterface, Votable {
  static Future<Comment> default_() =>
      RustLib.instance.api.redditApiModelCommentCommentDefault();

  /// flutter_rust_bridge:sync,getter
  bool get archived;

  /// flutter_rust_bridge:sync,getter
  AuthorInfo? get author;

  /// flutter_rust_bridge:sync,getter
  String get body;

  /// flutter_rust_bridge:sync,getter
  String get bodyHtml;

  /// flutter_rust_bridge:sync,getter
  bool get canGild;

  /// flutter_rust_bridge:sync,getter
  bool get canModPost;

  /// flutter_rust_bridge:sync,getter
  bool get collapsed;

  /// flutter_rust_bridge:sync,getter
  int get controversiality;

  /// Date of creation in logged-in user locale
  /// flutter_rust_bridge:sync,getter
  DateTime get created;

  /// Date of creation in UTC
  /// flutter_rust_bridge:sync,getter
  DateTime get createdUtc;

  /// flutter_rust_bridge:sync,getter
  int get depth;

  /// flutter_rust_bridge:sync,getter
  String? get distinguished;

  /// flutter_rust_bridge:sync,getter
  int get downs;

  /// flutter_rust_bridge:sync,getter
  double? get edited;

  /// flutter_rust_bridge:sync,getter
  int get gilded;

  /// flutter_rust_bridge:sync,getter
  String get id;

  /// flutter_rust_bridge:sync,getter
  bool get isSubmitter;

  /// flutter_rust_bridge:sync,getter
  bool? get likes;

  /// flutter_rust_bridge:sync,getter
  String get linkId;

  /// flutter_rust_bridge:sync,getter
  bool get locked;

  /// flutter_rust_bridge:sync,getter
  @override
  Fullname get name;

  /// flutter_rust_bridge:sync,getter
  bool get noFollow;

  /// flutter_rust_bridge:sync,getter
  String get parentId;

  /// flutter_rust_bridge:sync,getter
  String get permalink;

  /// flutter_rust_bridge:sync,getter
  bool get saved;

  /// flutter_rust_bridge:sync,getter
  int get score;

  /// flutter_rust_bridge:sync,getter
  bool get scoreHidden;

  /// flutter_rust_bridge:sync,getter
  bool get sendReplies;

  /// flutter_rust_bridge:sync,getter
  bool get stickied;

  /// flutter_rust_bridge:sync,getter
  String get subreddit;

  /// flutter_rust_bridge:sync,getter
  String get subredditId;

  /// flutter_rust_bridge:sync,getter
  String get subredditNamePrefixed;

  /// flutter_rust_bridge:sync,getter
  String get subredditType;

  /// flutter_rust_bridge:sync,getter
  int get ups;

  @override
  Future<void> name();

  /// If `more` is a `Thing::More`, if it exists in `Self::replies` or in the replies of one of
  /// its children, will replace it with `new_things`.
  void replaceMore({required Thing more, required List<Thing> newThings});

  List<Thing> replies();

  @override
  Future<void> save({required Client client});

  @override
  Future<void> setLikes({bool? likes});

  @override
  Future<void> setSaved({required bool saved});

  @override
  Future<void> unsave({required Client client});

  @override
  Future<void> vote({required VoteDirection direction, required Client client});
}

enum CommentSort {
  confidence,
  top,
  new_,
  controversial,
  old,
  random,
  qa,
  live,
  ;
}
