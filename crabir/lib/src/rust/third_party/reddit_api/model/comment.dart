// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../model.dart';
import 'author.dart';
import 'flair.dart';
import 'multi.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'post.dart';
import 'subreddit.dart';
import 'user.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `eq`, `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Comment>>
abstract class Comment implements RustOpaqueInterface {
  bool get archived;

  AuthorInfo? get author;

  String get body;

  String get bodyHtml;

  bool get canGild;

  bool get canModPost;

  bool get collapsed;

  PlatformInt64 get controversiality;

  double get created;

  double get createdUtc;

  PlatformInt64 get depth;

  PlatformInt64 get downs;

  double? get edited;

  PlatformInt64 get gilded;

  String get id;

  bool get isSubmitter;

  bool? get likes;

  String get linkId;

  bool get locked;

  Fullname get name;

  bool get noFollow;

  String get parentId;

  String get permalink;

  bool get saved;

  PlatformInt64 get score;

  bool get scoreHidden;

  bool get sendReplies;

  bool get stickied;

  String get subreddit;

  String get subredditId;

  String get subredditNamePrefixed;

  String get subredditType;

  PlatformInt64 get ups;

  set archived(bool archived);

  set author(AuthorInfo? author);

  set body(String body);

  set bodyHtml(String bodyHtml);

  set canGild(bool canGild);

  set canModPost(bool canModPost);

  set collapsed(bool collapsed);

  set controversiality(PlatformInt64 controversiality);

  set created(double created);

  set createdUtc(double createdUtc);

  set depth(PlatformInt64 depth);

  set downs(PlatformInt64 downs);

  set edited(double? edited);

  set gilded(PlatformInt64 gilded);

  set id(String id);

  set isSubmitter(bool isSubmitter);

  set likes(bool? likes);

  set linkId(String linkId);

  set locked(bool locked);

  set name(Fullname name);

  set noFollow(bool noFollow);

  set parentId(String parentId);

  set permalink(String permalink);

  set saved(bool saved);

  set score(PlatformInt64 score);

  set scoreHidden(bool scoreHidden);

  set sendReplies(bool sendReplies);

  set stickied(bool stickied);

  set subreddit(String subreddit);

  set subredditId(String subredditId);

  set subredditNamePrefixed(String subredditNamePrefixed);

  set subredditType(String subredditType);

  set ups(PlatformInt64 ups);

  static Future<Comment> default_() =>
      RustLib.instance.api.redditApiModelCommentCommentDefault();

  /// flutter_rust_bridge:getter,sync
  List<Thing> get replies;
}
