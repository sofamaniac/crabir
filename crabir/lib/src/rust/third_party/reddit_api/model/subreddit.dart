// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../model.dart';
import 'flair.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'subreddit.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `try_from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Common>>
abstract class Common implements RustOpaqueInterface {
  bool get acceptFollowers;

  List<String> get allowedMediaInComments;

  String get bannerImg;

  Int64List? get bannerSize;

  double get created;

  double get createdUtc;

  bool get disableContributorRequests;

  String get displayName;

  String get displayNamePrefixed;

  bool get freeFormReports;

  String? get headerImg;

  Int64List? get headerSize;

  String get keyColor;

  bool get linkFlairEnabled;

  String get linkFlairPosition;

  Fullname get name;

  String get primaryColor;

  String get publicDescription;

  bool get quarantine;

  bool get restrictCommenting;

  bool get restrictPosting;

  bool get showMedia;

  String get submitLinkLabel;

  String get submitTextLabel;

  String get subredditType;

  PlatformInt64 get subscribers;

  String get title;

  String get url;

  bool get userIsBanned;

  bool get userIsContributor;

  bool get userIsModerator;

  bool get userIsMuted;

  bool get userIsSubscriber;

  set acceptFollowers(bool acceptFollowers);

  set allowedMediaInComments(List<String> allowedMediaInComments);

  set bannerImg(String bannerImg);

  set bannerSize(Int64List? bannerSize);

  set created(double created);

  set createdUtc(double createdUtc);

  set disableContributorRequests(bool disableContributorRequests);

  set displayName(String displayName);

  set displayNamePrefixed(String displayNamePrefixed);

  set freeFormReports(bool freeFormReports);

  set headerImg(String? headerImg);

  set headerSize(Int64List? headerSize);

  set keyColor(String keyColor);

  set linkFlairEnabled(bool linkFlairEnabled);

  set linkFlairPosition(String linkFlairPosition);

  set name(Fullname name);

  set primaryColor(String primaryColor);

  set publicDescription(String publicDescription);

  set quarantine(bool quarantine);

  set restrictCommenting(bool restrictCommenting);

  set restrictPosting(bool restrictPosting);

  set showMedia(bool showMedia);

  set submitLinkLabel(String submitLinkLabel);

  set submitTextLabel(String submitTextLabel);

  set subredditType(String subredditType);

  set subscribers(PlatformInt64 subscribers);

  set title(String title);

  set url(String url);

  set userIsBanned(bool userIsBanned);

  set userIsContributor(bool userIsContributor);

  set userIsModerator(bool userIsModerator);

  set userIsMuted(bool userIsMuted);

  set userIsSubscriber(bool userIsSubscriber);

  static Future<Common> default_() =>
      RustLib.instance.api.redditApiModelSubredditCommonDefault();

  /// flutter_rust_bridge:getter,sync
  SubredditIcon get icon;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Details>>
abstract class Details implements RustOpaqueInterface {
  bool get defaultSet;

  String get description;

  String get iconColor;

  Common get other;

  bool get over18;

  List<String> get previousNames;

  set defaultSet(bool defaultSet);

  set description(String description);

  set iconColor(String iconColor);

  set other(Common other);

  set over18(bool over18);

  set previousNames(List<String> previousNames);

  static Future<Details> default_() =>
      RustLib.instance.api.redditApiModelSubredditDetailsDefault();

  /// flutter_rust_bridge:getter,sync
  SubredditIcon get icon;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Subreddit>>
abstract class Subreddit implements RustOpaqueInterface {
  int? get accountsActive;

  bool get accountsActiveIsFuzzed;

  int get activeUserCount;

  String get advertiserCategory;

  bool get allOriginalContent;

  bool get allowDiscovery;

  bool get allowGalleries;

  bool get allowImages;

  bool get allowPolls;

  bool get allowPredictionContributors;

  bool get allowPredictions;

  bool get allowPredictionsTournament;

  bool get allowTalks;

  bool get allowVideogifs;

  bool get allowVideos;

  String get bannerBackgroundColor;

  String get bannerBackgroundImage;

  bool get canAssignLinkFlair;

  bool get canAssignUserFlair;

  bool get collapseDeletedComments;

  CommentContributionSettings get commentContributionSettings;

  PlatformInt64 get commentScoreHideMins;

  bool get communityReviewed;

  String get description;

  String? get descriptionHtml;

  Int64List? get emojisCustomSize;

  bool get emojisEnabled;

  bool get hasMenuWidget;

  String get headerTitle;

  bool get hideAds;

  String get id;

  bool? get isCrosspostableSubreddit;

  bool? get isEnrolledInNewModmail;

  String get lang;

  String get mobileBannerImage;

  String? get notificationLevel;

  bool get originalContentTagEnabled;

  Common get other;

  bool get over18;

  PlatformInt64 get predictionLeaderboardEntryType;

  String? get publicDescriptionHtml;

  bool get publicTraffic;

  bool get shouldArchivePosts;

  bool get shouldShowMediaInCommentsSetting;

  bool get showMediaPreview;

  bool get spoilersEnabled;

  String get submissionType;

  String get submitText;

  String? get submitTextHtml;

  String? get suggestedCommentSort;

  bool? get userCanFlairInSr;

  Flair get userFlair;

  bool get userFlairEnabledInSr;

  bool get userHasFavorited;

  bool? get userSrFlairEnabled;

  bool get userSrThemeEnabled;

  bool? get wikiEnabled;

  int? get wls;

  set accountsActive(int? accountsActive);

  set accountsActiveIsFuzzed(bool accountsActiveIsFuzzed);

  set activeUserCount(int activeUserCount);

  set advertiserCategory(String advertiserCategory);

  set allOriginalContent(bool allOriginalContent);

  set allowDiscovery(bool allowDiscovery);

  set allowGalleries(bool allowGalleries);

  set allowImages(bool allowImages);

  set allowPolls(bool allowPolls);

  set allowPredictionContributors(bool allowPredictionContributors);

  set allowPredictions(bool allowPredictions);

  set allowPredictionsTournament(bool allowPredictionsTournament);

  set allowTalks(bool allowTalks);

  set allowVideogifs(bool allowVideogifs);

  set allowVideos(bool allowVideos);

  set bannerBackgroundColor(String bannerBackgroundColor);

  set bannerBackgroundImage(String bannerBackgroundImage);

  set canAssignLinkFlair(bool canAssignLinkFlair);

  set canAssignUserFlair(bool canAssignUserFlair);

  set collapseDeletedComments(bool collapseDeletedComments);

  set commentContributionSettings(
      CommentContributionSettings commentContributionSettings);

  set commentScoreHideMins(PlatformInt64 commentScoreHideMins);

  set communityReviewed(bool communityReviewed);

  set description(String description);

  set descriptionHtml(String? descriptionHtml);

  set emojisCustomSize(Int64List? emojisCustomSize);

  set emojisEnabled(bool emojisEnabled);

  set hasMenuWidget(bool hasMenuWidget);

  set headerTitle(String headerTitle);

  set hideAds(bool hideAds);

  set id(String id);

  set isCrosspostableSubreddit(bool? isCrosspostableSubreddit);

  set isEnrolledInNewModmail(bool? isEnrolledInNewModmail);

  set lang(String lang);

  set mobileBannerImage(String mobileBannerImage);

  set notificationLevel(String? notificationLevel);

  set originalContentTagEnabled(bool originalContentTagEnabled);

  set other(Common other);

  set over18(bool over18);

  set predictionLeaderboardEntryType(
      PlatformInt64 predictionLeaderboardEntryType);

  set publicDescriptionHtml(String? publicDescriptionHtml);

  set publicTraffic(bool publicTraffic);

  set shouldArchivePosts(bool shouldArchivePosts);

  set shouldShowMediaInCommentsSetting(bool shouldShowMediaInCommentsSetting);

  set showMediaPreview(bool showMediaPreview);

  set spoilersEnabled(bool spoilersEnabled);

  set submissionType(String submissionType);

  set submitText(String submitText);

  set submitTextHtml(String? submitTextHtml);

  set suggestedCommentSort(String? suggestedCommentSort);

  set userCanFlairInSr(bool? userCanFlairInSr);

  set userFlair(Flair userFlair);

  set userFlairEnabledInSr(bool userFlairEnabledInSr);

  set userHasFavorited(bool userHasFavorited);

  set userSrFlairEnabled(bool? userSrFlairEnabled);

  set userSrThemeEnabled(bool userSrThemeEnabled);

  set wikiEnabled(bool? wikiEnabled);

  set wls(int? wls);

  static Future<Subreddit> default_() =>
      RustLib.instance.api.redditApiModelSubredditSubredditDefault();

  /// flutter_rust_bridge:getter,sync
  SubredditIcon get icon;
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SubredditID>>
abstract class SubredditId implements RustOpaqueInterface {
  static Future<SubredditId> default_() =>
      RustLib.instance.api.redditApiModelSubredditSubredditIdDefault();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SubredditInfo>>
abstract class SubredditInfo implements RustOpaqueInterface {
  Details? get details;

  String get subreddit;

  SubredditId get subredditId;

  String get subredditNamePrefixed;

  int get subscribers;

  set details(Details? details);

  set subreddit(String subreddit);

  set subredditId(SubredditId subredditId);

  set subredditNamePrefixed(String subredditNamePrefixed);

  set subscribers(int subscribers);

  static Future<SubredditInfo> default_() =>
      RustLib.instance.api.redditApiModelSubredditSubredditInfoDefault();
}

class CommentContributionSettings {
  final List<String> allowedMediaTypes;

  const CommentContributionSettings({
    required this.allowedMediaTypes,
  });

  static Future<CommentContributionSettings> default_() => RustLib.instance.api
      .redditApiModelSubredditCommentContributionSettingsDefault();

  @override
  int get hashCode => allowedMediaTypes.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CommentContributionSettings &&
          runtimeType == other.runtimeType &&
          allowedMediaTypes == other.allowedMediaTypes;
}

class Icon {
  final String url;
  final BigInt width;
  final BigInt height;

  const Icon({
    required this.url,
    required this.width,
    required this.height,
  });

  @override
  int get hashCode => url.hashCode ^ width.hashCode ^ height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Icon &&
          runtimeType == other.runtimeType &&
          url == other.url &&
          width == other.width &&
          height == other.height;
}

enum NotificationLevel {
  unknown,
  low,
  ;

  static Future<NotificationLevel> default_() =>
      RustLib.instance.api.redditApiModelSubredditNotificationLevelDefault();
}

@freezed
sealed class SubredditIcon with _$SubredditIcon {
  const SubredditIcon._();

  const factory SubredditIcon.image(
    Icon field0,
  ) = SubredditIcon_Image;
  const factory SubredditIcon.color(
    String field0,
  ) = SubredditIcon_Color;
}
